{
  "shorthand variable declaration": {
    "prefix": ":",
    "body": [
      "${1} := ${0}"
    ],
    "description": "v := value"
  },
  "anonymous function": {
    "prefix": "anon",
    "body": [
      "${1:fn} := func() {",
      "\t${2:${VISUAL}}",
      "}",
      "${0}"
    ],
    "description": "fn := func() { ... }"
  },
  "append": {
    "prefix": "ap",
    "body": [
      "append(${1:slice}, ${0:value})"
    ],
    "description": "append(slice, value)"
  },
  "append assignment": {
    "prefix": "ap=",
    "body": [
      "${1:slice} = append($1, ${0:value})"
    ],
    "description": "a = append(a, value)"
  },
  "break": {
    "prefix": "br",
    "body": [
      "break"
    ],
    "description": "break"
  },
  "channel": {
    "prefix": "ch",
    "body": [
      "chan ${0:int}"
    ],
    "description": "chan Type"
  },
  "case": {
    "prefix": "case",
    "body": [
      "case ${1:value}:",
      "\t${0:${VISUAL}}"
    ],
    "description": "case ...:"
  },
  "constant": {
    "prefix": "con",
    "body": [
      "const ${1:NAME} ${2:Type} = ${0:0}"
    ],
    "description": "const XXX Type = ..."
  },
  "constants": {
    "prefix": "cons",
    "body": [
      "const (",
      "\t${1:NAME} ${2:Type} = ${3:value}",
      "\t${0}",
      ")"
    ],
    "description": "const ( ... )"
  },
  "constants with iota": {
    "prefix": "iota",
    "body": [
      "const (",
      "\t${1:NAME} ${2:Type} = iota",
      "\t${0}",
      ")"
    ],
    "description": "const ( ... = iota )"
  },
  "continue": {
    "prefix": "cn",
    "body": [
      "continue"
    ],
    "description": "continue"
  },
  "default case": {
    "prefix": "default",
    "body": [
      "default:",
      "\t${0:${VISUAL}}"
    ],
    "description": "default: ..."
  },
  "defer someFunction()": {
    "prefix": "df",
    "body": [
      "defer ${1:func}(${2})",
      "${0}"
    ],
    "description": "defer someFunction()"
  },
  "defer func() { ... }": {
    "prefix": "def",
    "body": [
      "defer func() {",
      "\t${0:${VISUAL}}",
      "}()"
    ],
    "description": "defer func() { ... }"
  },
  "defer recover": {
    "prefix": "defr",
    "body": [
      "defer func() {",
      "\tif err := recover(); err != nil {",
      "\t\t${0:${VISUAL}}",
      "\t}",
      "}()"
    ],
    "description": "defer recover"
  },
  "gpl": {
    "prefix": "gpl",
    "body": [
      "/*",
      "* This program is free software; you can redistribute it and/or modify",
      "* it under the terms of the GNU General Public License as published by",
      "* the Free Software Foundation; either version 2 of the License, or",
      "* (at your option) any later version.",
      "*",
      "* This program is distributed in the hope that it will be useful,",
      "* but WITHOUT ANY WARRANTY; without even the implied warranty of",
      "* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
      "* GNU General Public License for more details.",
      "*",
      "* You should have received a copy of the GNU General Public License",
      "* along with this program; if not, see <http://www.gnu.org/licenses/>.",
      "*",
      "* Copyright (C) ${1:Author}, `!v strftime(\"%Y\")`",
      "*/",
      "${0}"
    ],
    "description": "gpl"
  },
  "import": {
    "prefix": "import",
    "body": [
      "import (",
      "\t\"${1:package}\"",
      ")"
    ],
    "description": "import ( ... )"
  },
  "interface": {
    "prefix": "interface",
    "body": [
      "type ${1:Interface} interface {",
      "\t${2:/* TODO: add methods */}",
      "}"
    ],
    "description": "interface I { ... }"
  },
  "if condition": {
    "prefix": "if",
    "body": [
      "if ${1:condition} {",
      "\t${0:${VISUAL}}",
      "}"
    ],
    "description": "if ... { ... }"
  },
  "else": {
    "prefix": "else",
    "body": [
      "else {",
      "\t${0:${VISUAL}}",
      "}"
    ],
    "description": "else"
  },
  "If with inline error": {
    "prefix": "ife",
    "body": [
      "if err := ${1:condition}; err != nil {",
      "\t${0:${VISUAL}}",
      "}"
    ],
    "description": "If with inline error"
  },
  "errors.Wrap": {
    "prefix": "ew",
    "body": [
      "errors.Wrap(${1:err}, \"${2:message}\")"
    ],
    "description": "errors.Wrap"
  },
  "errors.Wrapf": {
    "prefix": "ewf",
    "body": [
      "errors.Wrapf(${1:err}, \"${2:message %v}\", ${3:args...})"
    ],
    "description": "errors.Wrapf"
  },
  "Error return": {
    "prefix": "errn",
    "body": [
      "if err != nil {",
      "\treturn err",
      "}",
      "${0}"
    ],
    "description": "Error return"
  },
  "Error return wrap": {
    "prefix": "errnw",
    "body": [
      "if err != nil {",
      "\treturn errors.Wrap(err, \"${1:message}\")",
      "}",
      "${0}"
    ],
    "description": "Error return wrap"
  },
  "Error return wrapf": {
    "prefix": "errnwf",
    "body": [
      "if err != nil {",
      "\treturn errors.Wrapf(err, \"${1:message %v}\", ${2:args...})",
      "}",
      "${0}"
    ],
    "description": "Error return wrapf"
  },
  "Error with log.Fatal(err)": {
    "prefix": "errl",
    "body": [
      "if err != nil {",
      "\tlog.Fatal(err)",
      "}",
      "${0}"
    ],
    "description": "Error with log.Fatal(err)"
  },
  "Error return with two return values": {
    "prefix": "errn,",
    "body": [
      "if err != nil {",
      "\treturn ${1:nil}, ${2:err}",
      "}",
      "${0}"
    ],
    "description": "Error return with two return values"
  },
  "Error return wrap with two return values": {
    "prefix": "errn,w",
    "body": [
      "if err != nil {",
      "\treturn nil, errors.Wrap(err, \"${1:message}\")",
      "}",
      "${0}"
    ],
    "description": "Error return wrap with two return values"
  },
  "Error return wrapf with two return values": {
    "prefix": "errn,wf",
    "body": [
      "if err != nil {",
      "\treturn nil, errors.Wrapf(err, \"${1:message %v}\", ${2:args...})",
      "}",
      "${0}"
    ],
    "description": "Error return wrapf with two return values"
  },
  "Error panic": {
    "prefix": "errp",
    "body": [
      "if err != nil {",
      "\tpanic(${1})",
      "}",
      "${0}"
    ],
    "description": "Error panic"
  },
  "Error test fatal": {
    "prefix": "errt",
    "body": [
      "if err != nil {",
      "\tt.Fatal(err)",
      "}",
      "${0}"
    ],
    "description": "Error test fatal"
  },
  "Error handle and return": {
    "prefix": "errh",
    "body": [
      "if err != nil {",
      "\t${1}",
      "\treturn",
      "}",
      "${0}"
    ],
    "description": "Error handle and return"
  },
  "json field tag": {
    "prefix": "json",
    "body": [
      "`json:\"${1:`!v  go#util#snippetcase(matchstr(getline(\".\"), '\\w\\+'))`}\"`"
    ],
    "description": "`json:key`"
  },
  "yaml field tag": {
    "prefix": "yaml",
    "body": [
      "`yaml:\"${1:`!v  go#util#snippetcase(matchstr(getline(\".\"), '\\w\\+'))`}\"`"
    ],
    "description": "`yaml:key`"
  },
  "fallthrough": {
    "prefix": "ft",
    "body": [
      "fallthrough"
    ],
    "description": "fallthrough"
  },
  "for loop": {
    "prefix": "for",
    "body": [
      "for ${1} {",
      "\t${0:${VISUAL}}",
      "}"
    ],
    "description": "for ... { ... }"
  },
  "for integer loop": {
    "prefix": "fori",
    "body": [
      "for ${1:i} := 0; $1 < ${2:N}; $1++ {",
      "\t${0:${VISUAL}}",
      "}"
    ],
    "description": "for 0..N-1 { ... }"
  },
  "for range loop": {
    "prefix": "forr",
    "body": [
      "for ${2:k}, ${3:v} := range ${1} {",
      "\t${0:${VISUAL}}",
      "}"
    ],
    "description": "for k, v := range items { ... }"
  },
  "for select": {
    "prefix": "forsel",
    "body": [
      "for {",
      "\tselect {",
      "\t\tcase ${2:${1:result} := }<- ${3:channel}:",
      "\t\t\t${0}",
      "\t}",
      "}"
    ],
    "description": "for select"
  },
  "select case": {
    "prefix": "selc",
    "body": [
      "case ${1:${2:var} := }<-${3:channel}:",
      "\t${0}"
    ],
    "description": "select case"
  },
  "function": {
    "prefix": "func",
    "body": [
      "func ${1:name}(${2:params})${3/(.+)/ /}`!p opening_par(snip, 3)`$3`!p closing_par(snip, 3)` {",
      "\t${0:${VISUAL}}",
      "}"
    ],
    "description": "func Function(...) [error] { ... }"
  },
  "Fmt Printf debug": {
    "prefix": "ff",
    "body": [
      "fmt.Printf(\"$1 = %+v\\n\", ${1:${VISUAL}})"
    ],
    "description": "fmt.Printf(...)"
  },
  "Fmt Printf debug with hash": {
    "prefix": "ffh",
    "body": [
      "fmt.Printf(\"$1 = %#v\\n\", ${1:${VISUAL}})"
    ],
    "description": "fmt.Printf(#...) hash"
  },
  "Fmt Println debug": {
    "prefix": "fn",
    "body": [
      "fmt.Println(\"${1:${VISUAL}}\")"
    ],
    "description": "fmt.Println(...)"
  },
  "Fmt Errorf debug": {
    "prefix": "fe",
    "body": [
      "fmt.Errorf(\"${1:${VISUAL}}\")"
    ],
    "description": "fmt.Errorf(...)"
  },
  "Fmt Errorf wrap": {
    "prefix": "few",
    "body": [
      "fmt.Errorf(\"${1:message}: %w\", ${2:${VISUAL:err}})"
    ],
    "description": "fmt.Errorf(%w, err)"
  },
  "Error return fmt.Errorf(%w, err)": {
    "prefix": "errnfw",
    "body": [
      "if ${1:${VISUAL:err}} != nil {",
      "\treturn fmt.Errorf(\"${2:message}: %w\", $1)",
      "}"
    ],
    "description": "Error return fmt.Errorf(%w, err)"
  },
  "log printf": {
    "prefix": "lf",
    "body": [
      "log.Printf(\"${1:${VISUAL}} = %+v\\n\", $1)"
    ],
    "description": "log.Printf(...)"
  },
  "log println": {
    "prefix": "ln",
    "body": [
      "log.Println(\"${1:${VISUAL}}\")"
    ],
    "description": "log.Println(...)"
  },
  "make": {
    "prefix": "make",
    "body": [
      "make(${1:[]string}, ${2:0})${0}"
    ],
    "description": "make(Type, size)"
  },
  "map": {
    "prefix": "map",
    "body": [
      "map[${1:string}]${0:int}"
    ],
    "description": "map[Type]Type"
  },
  "main": {
    "prefix": "main",
    "body": [
      "func main() {",
      "\t${0:${VISUAL}}",
      "}"
    ],
    "description": "func main() { ... }"
  },
  "method": {
    "prefix": "meth",
    "body": [
      "func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}`!p opening_par(snip, 5)`$5`!p closing_par(snip, 5)` {",
      "\t${0:${VISUAL}}",
      "}"
    ],
    "description": "func (self Type) Method(...) [error] { ... }"
  },
  "ok": {
    "prefix": "ok",
    "body": [
      "if !ok {",
      "\t${0:${VISUAL}}",
      "}"
    ],
    "description": "if !ok { ... }"
  },
  "package": {
    "prefix": "package",
    "body": [
      "// Package $1 provides ${2:...}",
      "package ${1:main}",
      "${0}"
    ],
    "description": "package ..."
  },
  "panic": {
    "prefix": "pn",
    "body": [
      "panic(\"${0:msg}\")"
    ],
    "description": "panic()"
  },
  "return": {
    "prefix": "rt",
    "body": [
      "return ${0:${VISUAL}}"
    ],
    "description": "return"
  },
  "select": {
    "prefix": "select",
    "body": [
      "select {",
      "case ${1:v1} := <-${2:chan1}:",
      "\t${0}",
      "}"
    ],
    "description": "select { case a := <-chan: ... }"
  },
  "struct": {
    "prefix": "st",
    "body": [
      "type ${1:Type} struct {",
      "\t${0}",
      "}"
    ],
    "description": "type T struct { ... }"
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "switch ${1:var} {",
      "case ${2:value1}:",
      "\t${0}",
      "}"
    ],
    "description": "switch x { ... }"
  },
  "type switch": {
    "prefix": "tswitch",
    "body": [
      "switch ${2:$1 := }${1:v}.(type) {",
      "\t${0}",
      "}"
    ],
    "description": "type switch x { ... }"
  },
  "sprintf": {
    "prefix": "sp",
    "body": [
      "fmt.Sprintf(\"%${1:s}\", ${2:var})"
    ],
    "description": "fmt.Sprintf(...)"
  },
  "goroutine named function": {
    "prefix": "go",
    "body": [
      "go ${1:funcName}(${0})"
    ],
    "description": "go someFunc(...)"
  },
  "goroutine anonymous function": {
    "prefix": "gof",
    "body": [
      "go func() {",
      "\t${1:${VISUAL}}",
      "}()",
      "${0}"
    ],
    "description": "go func() { ... }()"
  },
  "test function": {
    "prefix": "test",
    "body": [
      "func Test${1:Function}(t *testing.T) {",
      "\t${0:${VISUAL}}",
      "}"
    ],
    "description": "func TestXYZ(t *testing.T) { ... }"
  },
  "test t.Run": {
    "prefix": "tr",
    "body": [
      "t.Run(\"${0}\", func(t *testing.T){",
      "",
      "})"
    ],
    "description": "t.Run(XYZ, func(t *testing.T){ ... })"
  },
  "test table snippet": {
    "prefix": "tt",
    "body": [
      "var tests = []struct {",
      "\tname string",
      "\texpected string",
      "\tgiven string",
      "}{",
      "\t{\"${2}\", \"${3}\", \"${4}\",},",
      "}",
      "for _, tt := range tests {",
      "\ttt := tt",
      "\tt.Run(tt.name, func(t *testing.T){",
      "\t\tactual := ${1:${VISUAL}}(tt.given)",
      "\t\tif actual != tt.expected {",
      "\t\t\tt.Errorf(\"$1(%s): expected %s, actual %s\", tt.given, tt.expected, actual)",
      "\t\t}",
      "\t})",
      "}"
    ],
    "description": "test table snippet"
  },
  "fuzz function": {
    "prefix": "fuzz",
    "body": [
      "func Fuzz${1:Function}(f *testing.F) {",
      "\tf.Fuzz(func(t *testing.T, ${2}) {",
      "\t\t${0:${VISUAL}}",
      "\t})",
      "}"
    ],
    "description": "func FuzzXYZ(f *testing.F) { ... }"
  },
  "http.HandlerFunc": {
    "prefix": "hf",
    "body": [
      "func ${1:handler}(w http.ResponseWriter, r *http.Request) {",
      "\t${0:fmt.Fprintf(w, \"hello world\")}",
      "}"
    ],
    "description": "http.HandlerFunc"
  },
  "mux.HandleFunc": {
    "prefix": "hhf",
    "body": [
      "${1:http}.HandleFunc(\"${2:/}\", func(w http.ResponseWriter, r *http.Request) {",
      "\t${0:fmt.Fprintf(w, \"hello world\")}",
      "})"
    ],
    "description": "mux.HandleFunc"
  },
  "quick test server": {
    "prefix": "tsrv",
    "body": [
      "ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
      "\tfmt.Fprintln(w, ${1:`response`})",
      "}))",
      "defer ts.Close()",
      "${0:someUrl} = ts.URL"
    ],
    "description": "httptest.NewServer"
  },
  "test error handling": {
    "prefix": "ter",
    "body": [
      "if err != nil {",
      "\tt.Errorf(\"${0:message}\")",
      "}"
    ],
    "description": "if err != nil { t.Errorf(...) }"
  },
  "test fatal error": {
    "prefix": "terf",
    "body": [
      "if err != nil {",
      "\tt.Fatalf(\"${0:message}\")",
      "}"
    ],
    "description": "if err != nil { t.Fatalf(...) }"
  },
  "example function": {
    "prefix": "example",
    "body": [
      "func Example${1:Method}() {",
      "\t${0:${VISUAL}}",
      "\t// Output:",
      "}"
    ],
    "description": "func ExampleXYZ() { ... }"
  },
  "benchmark function": {
    "prefix": "benchmark",
    "body": [
      "func Benchmark${1:Method}(b *testing.B) {",
      "\tfor i := 0; i < b.N; i++ {",
      "\t\t${0:${VISUAL}}",
      "\t}",
      "}"
    ],
    "description": "func BenchmarkXYZ(b *testing.B) { ... }"
  },
  "variable declaration": {
    "prefix": "var",
    "body": [
      "var ${1:x} ${2:Type}${3: = ${0:value}}"
    ],
    "description": "var x Type [= ...]"
  },
  "variables declaration": {
    "prefix": "vars",
    "body": [
      "var (",
      "\t${1:x} ${2:Type}${3: = ${0:value}}",
      ")"
    ],
    "description": "var ( ... )"
  },
  "equals: test two identifiers with DeepEqual": {
    "prefix": "eq",
    "body": [
      "if !reflect.DeepEqual(${1:expected}, ${2:actual}) {",
      "\t_, file, line, _ := runtime.Caller(0)",
      "\tfmt.Printf(\"%s:%d:\\n\\n\\texp: %#v\\n\\n\\tgot: %#v\\n\\n\", filepath.Base(file), line, $1, $2)",
      "\tt.FailNow()",
      "}"
    ],
    "description": "equals: test two identifiers with DeepEqual"
  }
}
