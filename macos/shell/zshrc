# Prompt
source ~/.shell_prompt.sh

# Zsh autocompletion
autoload bashcompinit && bashcompinit
autoload -Uz compinit && compinit

# Terminal colors
export CLICOLOR=1

# Autojump
[ -f /opt/homebrew/etc/profile.d/autojump.sh ] && . /opt/homebrew/etc/profile.d/autojump.sh

# NVM: commented due to startup time
#export NVM_DIR="$HOME/.nvm"
#[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
#[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Set PATH
# nvm:golang:path
export PATH="/Users/sebiwi/.nvm/versions/node/v16.13.1/bin/:/Users/sebiwi/go/bin:$PATH"

# tfenv
## See https://github.com/hashicorp/terraform-provider-aws/issues/21749
export TFENV_ARCH=arm64

# rbenv
eval "$(rbenv init -)"

# pyenv
eval "$(pyenv init --path)"
eval "$(pyenv init -)"
#fi

# Virtualenvwrapper
export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"
export WORKON_HOME=$HOME/.Envs
pyenv virtualenvwrapper_lazy

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# History
HISTFILE=~/.histfile
HISTSIZE=50000
SAVEHIST=10000

# Kubernetes
source ~/stuff/dotfiles/shell/kubernetes.sh
source /opt/homebrew/opt/kube-ps1/share/kube-ps1.sh

# AWS
sp() {
  export AWS_PROFILE=$(grep '^\[.*\]$' ~/.aws/credentials ~/.aws/config | cut -d ':' -f 2 | cut -d ' ' -f 2 | tr -d [ | tr -d ] | fzf)
  export AWS_DEFAULT_REGION=eu-west-1
}

up() {
  unset AWS_PROFILE
  unset AWS_DEFAULT_REGION
}

# Bat
export MANPAGER="sh -c 'col -bx | bat -l man -p'"

# Github
alias gprunesquashmerged='git checkout -q main && git for-each-ref refs/heads/ "--format=%(refname:short)" | while read branch; do mergeBase=$(git merge-base main $branch) && [[ $(git cherry main $(git commit-tree $(git rev-parse "$branch^{tree}") -p $mergeBase -m _)) == "-"* ]] && git branch -D $branch; done'

function share {

    BUCKET=$(whoami)-share
    EXPIRY_DAYS=1

    # create the bucket if it doesn't exist, and apply a lifecycle policy to tidy up old files
    # if aws s3 ls "s3://$BUCKET" 2>&1 | grep -q 'NoSuchBucket'; then
    #     echo "Creating bucket: $BUCKET and applying expiry policy of $EXPIRY_DAYS days...";
    #     aws s3api create-bucket --bucket $BUCKET --region eu-west-1 --create-bucket-configuration LocationConstraint=eu-west-1;
    #     aws s3api put-bucket-lifecycle \
    #         --bucket $BUCKET \
    #         --lifecycle-configuration "{\"Rules\":[{\"Prefix\":\"\",\"Status\":\"Enabled\",\"AbortIncompleteMultipartUpload\":{\"DaysAfterInitiation\":7},\"Expiration\":{\"Days\":$EXPIRY_DAYS},\"ID\":\"ttl\"}]}";
    # fi

    # upload & copy presigned url to clipboard
    aws s3 cp "$1" "s3://$BUCKET/$1";
    aws s3 presign "s3://$BUCKET/$1" --expires-in $(($EXPIRY_DAYS*86400)) | pbcopy;
    echo -e "\nFile uploaded with $EXPIRY_DAYS day ttl and presigned URL copied to clipboard\n";

    echo -e "Generated link\n"
    pbpaste
    echo -e "\n"

}

complete -C '/opt/homebrew/bin/aws_completer' aws
